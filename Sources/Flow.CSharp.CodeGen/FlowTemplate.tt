<#@ template language="C#" visibility="internal"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="model" type="Flow.CodeGen.Models.FlowModel" #>
using Flow.CSharp.Core;

// ------------------------------------------------------------------------------
// Auto-generated
// ------------------------------------------------------------------------------
namespace <#= model.NameSpace #>
{
	public class <#= model.FlowName #>
	{
		#region Nodes
<# foreach (var node in model.FlowNodes) { #>
		private readonly <#= node.NodeType #> <#= node.Name #> = new <#= node.NodeType #>();
<# } #>
		#endregion

		#region Input
<# foreach (var input in model.Inputs) { #>
		//In
		public Input<<#= input.NodePort.Type #>> <#= input.NodeName #>_<#= input.NodePort.Name #> => <#= input.NodeName #>.<#= input.NodePort.Name #>;
<# } #>
		#endregion
	
		#region Output
<# foreach (var output in model.Outputs) { #>
		//Out
		public Output<<#= output.NodePort.Type #>> <#= output.NodeName #>_<#= output.NodePort.Name #> => <#= output.NodeName #>.<#= output.NodePort.Name #>;
<# } #>
		#endregion

		public <#= model.FlowName #>()
		{
<# foreach (var connector in model.NodeConnectors) { #>
			<#= connector.ToNodeName #>.<#= connector.ToPort #>.SetDependency(<#= connector.FromNodeName #>.<#= connector.FromPort #>);
<# } #>
		}

		public void Run ( <#= string.Join(", ", model.Inputs.Select(i => $"{i.NodePort.Type} arg{i.NodeName}_{i.NodePort.Name}")) #> )
		{
<# foreach (var input in model.Inputs) { #>
			<#= input.NodeName #>.<#= input.NodePort.Name #>.SetValueDirectly(arg<#= input.NodeName #>_<#= input.NodePort.Name #>);
<# } #>
		}
	}	
}
